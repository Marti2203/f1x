/*
  This file is part of f1x.
  Copyright (C) 2016  Sergey Mechtaev, Gao Xiang, Shin Hwei Tan, Abhik Roychoudhury

  f1x is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <memory>

#pragma once

const ulong F1X_VERSION_MAJOR = @F1X_VERSION_MAJOR@;
const ulong F1X_VERSION_MINOR = @F1X_VERSION_MINOR@;
const ulong F1X_VERSION_PATCH = @F1X_VERSION_PATCH@;

const std::string F1X_CLANG_INCLUDE = "@F1X_CLANG_INCLUDE@";

const std::string F1X_RUNTIME_COMPILER = "g++";
const std::string F1X_RUNTIME_OPTIMIZATION = "-O1";

enum class Exploration {
  GENERATE_AND_VALIDATE, // evaluate patches one-by-one
  TEST_EQUIVALENCE,      // one-the-fly group patches based on test-equivalence
  PATH_EXPLORATION       // UNSUPPORTED explore paths, then synthesize patches
};


enum class TestPrioritization {
  FIXED_ORDER,      // first run failing, then passing tests
  MAX_FAILING       // dynamically prioritize tests based on previous failures
};


const bool USE_GLOBAL_VARIABLES = false;


struct Config {
  bool verbose;
  bool validatePatches;
  bool exploreAll;
  std::shared_ptr<std::string> searchSpaceFile; /* UNSUPPORTED */
  bool outputPatchMetadata; /* UNSUPPORTED */
  bool removeIntermediateData;
  bool insertAssignments; /* UNSUPPORTED */
  bool cppProject; /* UNSUPPORTED */
  ulong maxConditionParameter;
  ulong maxExpressionParameter;
  Exploration exploration;
  TestPrioritization testPrioritization;
};


static Config DEFAULT_CONFIG = {
  /* verbose = */ false,
  /* validatePatches = */ false,
  /* exploreAll = */ false,
  /* searchSpaceFile = */ nullptr,
  /* outputPatchMetadata = */ false,
  /* removeIntermediateData = */ false,
  /* insertAssignments = */ false,
  /* cppProject = */ false,
  /* maxConditionParameter = */ 64,
  /* maxExpressionParameter = */ 1,
  /* exploration = */ Exploration::TEST_EQUIVALENCE,
  /* testPrioritization = */ TestPrioritization::MAX_FAILING,
};

