/*
  This file is part of f1x.
  Copyright (C) 2016  Sergey Mechtaev, Abhik Roychoudhury

  f1x is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#include <cstdint>

typedef std::uint_least32_t uint;

enum class LocalizationFormula {
  OCHIAI,
  JACCARD,
  TARANTULA  
};


enum class CandidateSelection {
  FIXED_ORDER,         // order defined by search space ordering
  PREDICATE_SWITCHING, // predicate switching for failing test
  MAX_PASSING,         // prioritize candidates that pass maximim number of tests
  LEAST_COVERED        // prioritize candidates that are evaluated with least number of tests
};


enum class TestSelection {
  FIXED_ORDER,      // failing, then passing
  MAX_FAILING,      // prioritize tests that failed maximum number of times
  LARGEST_PARTITION // prioritize tests with largest average partition size
};


const unsigned F1X_VERSION_MAJOR = @F1X_VERSION_MAJOR@;
const unsigned F1X_VERSION_MINOR = @F1X_VERSION_MINOR@;
const unsigned F1X_VERSION_PATCH = @F1X_VERSION_PATCH@;

const std::string F1X_CLANG_INCLUDE = "@F1X_CLANG_INCLUDE@";

const bool USE_GLOBAL_VARIABLES = false;

// 0 means disabled:
const unsigned MAX_LOCALIZED_FILES = 0;
const unsigned MAX_LOCATIONS = 0; 
const unsigned MAX_EXECUTIONS_PER_LOCATION = 0;
const unsigned MAX_CANDIDATES_PER_LOCATION = 0;

const LocalizationFormula LOCALIZATION = LocalizationFormula::JACCARD;

const bool PRIORITIZE_CONDITIONS = true;

const CandidateSelection CANDIDATE_SELECTION = CandidateSelection::FIXED_ORDER;

const TestSelection TEST_SELECTION = TestSelection::MAX_FAILING;

const std::string RUNTIME_COMPILER = "g++";

const bool EXHAUSTIVE_EXPLORATION = false;

const std::string PATCH_DUMMY_REPLACEMENT = "%F1X_PATCH_DUMMY_REPLACEMENT%";
